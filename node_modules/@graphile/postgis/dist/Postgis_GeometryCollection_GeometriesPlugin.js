"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = require("./debug");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const plugin = builder => {
    builder.hook("GraphQLObjectType:fields", function AddGeometriesToGeometryCollection(fields, build, context) {
        const { scope: { isPgGISType, pgGISType, pgGISTypeDetails }, } = context;
        if (!isPgGISType ||
            !pgGISTypeDetails ||
            pgGISTypeDetails.subtype !== constants_1.GIS_SUBTYPE.GeometryCollection) {
            return fields;
        }
        const { extend, pgGISGraphQLInterfaceTypesByType, graphql: { GraphQLList }, } = build;
        const { hasZ, hasM } = pgGISTypeDetails;
        const zmflag = (hasZ ? 2 : 0) + (hasM ? 1 : 0); // Equivalent to ST_Zmflag: https://postgis.net/docs/ST_Zmflag.html
        const Interface = pgGISGraphQLInterfaceTypesByType[pgGISType.id][zmflag];
        if (!Interface) {
            debug_1.default("Unexpectedly couldn't find the interface");
            return fields;
        }
        return extend(fields, {
            geometries: {
                type: new GraphQLList(Interface),
                resolve(data) {
                    return data.__geojson.geometries.map((geom) => {
                        return {
                            __gisType: utils_1.getGISTypeName(constants_1.GIS_SUBTYPE[geom.type], hasZ, hasM),
                            __srid: data.__srid,
                            __geojson: geom,
                        };
                    });
                },
            },
        });
    });
};
exports.default = plugin;
//# sourceMappingURL=Postgis_GeometryCollection_GeometriesPlugin.js.map